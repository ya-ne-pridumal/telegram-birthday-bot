import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
MONTH, DAY, TIME = range(3)

# –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Å—è—Ü–∞–º–∏
months_ru = {
    "—è–Ω–≤–∞—Ä—å": 1, "—Ñ–µ–≤—Ä–∞–ª—å": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª—å": 4, "–º–∞–π": 5,
    "–∏—é–Ω—å": 6, "–∏—é–ª—å": 7, "–∞–≤–≥—É—Å—Ç": 8, "—Å–µ–Ω—Ç—è–±—Ä—å": 9,
    "–æ–∫—Ç—è–±—Ä—å": 10, "–Ω–æ—è–±—Ä—å": 11, "–¥–µ–∫–∞–±—Ä—å": 12
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –º–µ—Å—è—Ü —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: –º–∞—Ä—Ç)."
    )
    return MONTH

async def get_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text in months_ru:
        context.user_data['month'] = months_ru[text]
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–ø—Ä–∏–º–µ—Ä: 15).")
        return DAY
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞.")
        return MONTH

async def get_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        day = int(update.message.text)
        if 1 <= day <= 31:
            context.user_data['day'] = day
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ø—Ä–∏–º–µ—Ä: 20:45).")
            return TIME
        else:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 15")
        return DAY

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_text = update.message.text
        now = datetime.datetime.now()
        hour, minute = map(int, time_text.split(":"))
        birth_date = datetime.date(now.year, context.user_data['month'], context.user_data['day'])

        if birth_date < now.date():
            birth_date = datetime.date(now.year + 1, context.user_data['month'], context.user_data['day'])

        days_left = (birth_date - now.date()).days
        context.user_data['birth_date'] = birth_date

        await update.message.reply_text(
            f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è! –î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π."
        )
        return ConversationHandler.END
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 20:45")
        return TIME

async def respond(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = context.user_data
    if 'birth_date' in user:
        today = datetime.date.today()
        bd = user['birth_date']

        if today == bd:
            await update.message.reply_text(
                "üéÇü•≥ –í–æ—Ç –∏ –Ω–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è!\n"
                "–ñ–µ–ª–∞—é —É—Å–ø–µ—Ö–æ–≤ –≤ –∂–∏–∑–Ω–∏, –∑–¥–æ—Ä–æ–≤—å—è, —Å–∏–ª –∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!\n"
                "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç–∞–∫, –∫–∞–∫ –≤–∞–º —Ö–æ—á–µ—Ç—Å—è."
            )
        else:
            days_left = (bd - today).days
            await update.message.reply_text(f"–î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")

def main():
    import os
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, filters

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_month)],
            DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_day)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, respond))

    app.run_polling()

if __name__ == "__main__":
    main()